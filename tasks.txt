Task List:
    1. Represent a 2d grid using matrices in a numpy array
        a. One matrix to store the the type of block at each location
        b. Another to store the value of phi at each block
    
        Also set up some way to visualize this. Tinker with matplotlib and the
        animation library to figure out how to display vector fields over a grid
        
    2. Find an ordering of the blocks by distance to the starting block. This will
        allow you to run the iteration multiple times in this order. 
        a. you can create an adjacency-list based graph of the blocks where two 
            vertices are connected iff they are adjacent. Then run bfs (maybe use a 
            hash table to store which blocks you've already visited. (or use an 2d
            boolean array to store which bocks you've visited. 

            array[x][y] can be true if youve visited it already, false otherwise)
            so initialize it to false values (default?)
            
            ^will i need a queue for this? I think so. When should i stop? 

            When all the free space blocks have been visited. 
            not when the queue is empty. So when the number of updates equals
            the number of free space blocks? or the total blocks? I dont need to 
            calculate phi for occupied space

        b.  or run bfs on the representation? I think the above way is simpler. 
            or is it the same thing. I think its the same thing. 
            
    3. Make a solver that runs the Jacobi? iteration and stops at some threshold.

